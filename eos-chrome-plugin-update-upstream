#!/bin/bash -e
# Copyright (C) 2016 Endless Mobile, Inc.
# Licensed under the GPLv2

USERID=$(id -u)
if [ "$USERID" != "0" ]; then
    echo "Program requires superuser privileges"
    exit 1
fi

DEB_ARCH=`dpkg --print-architecture`
case ${DEB_ARCH} in
    amd64) ;; # Only 64-bit Intel architectures are supported
    *) echo "Unsupported architecture ${DEB_ARCH}"
       exit 1
       ;;
esac

TEMP_DIR=`mktemp -d`
DEST_DIR=/var/lib/chromium-plugins-extra/eos-chrome-plugin-updater
WGET_COMMAND="wget -c --tries=5"
DAYS_CHECK=7

# Data needed for the Widevine plugin, from Google Chrome
CHROME_URL=http://dl.google.com/linux/chrome/deb
CHROME_PACKAGES=${CHROME_URL}/dists/stable/main/binary-${DEB_ARCH}/Packages
CHROME_FLAVOUR_VERSION=google-chrome-stable
CHROME_VERSION=
CHROME_SHA1SUM=
CHROME_URL_FILENAME=
CHROME_FILENAME=
WIDEVINE_SO_FILE=/opt/google/chrome/libwidevinecdm.so
WIDEVINE_VERSION_FILE=${DEST_DIR}/Widevine_VERSION.txt

fp_exit() {
   echo $1
   rm -fr ${TEMP_DIR}
   exit 0
}

fp_exit_with_error() {
   echo $1
   echo "The Chromium plugins are NOT installed."
   [ -d ${DEST_DIR} ] || mkdir -p ${DEST_DIR}
   touch ${WIDEVINE_VERSION_FILE}
   rm -fr ${TEMP_DIR}
   exit 1
}

fp_exit_retry_with_error() {
   echo $1
   echo "The Chromium plugins are NOT installed."
   rm -fr ${TEMP_DIR}
   exit 1
}

fp_get_field() {
    grep-dctrl -n -s $1 ${CHROME_FLAVOUR_VERSION} ${TEMP_DIR}/Packages
}

fp_find_latest_version() {
    ${WGET_COMMAND} "${CHROME_PACKAGES}" -O "${TEMP_DIR}/Packages" \
        || fp_exit_retry_with_error "Failed to download Packages from Google Chrome"
    local package=$(fp_get_field "Package")
    [ -n "${package}" ] || \
        fp_exit_with_error "Packages does not contain ${CHROME_FLAVOUR_VERSION}"
    CHROME_VERSION=$(fp_get_field "Version")
    CHROME_SHA1SUM=$(fp_get_field "SHA1")
    local filename=$(fp_get_field "Filename")
    CHROME_URL_FILENAME=${CHROME_URL}/${filename}
    CHROME_FILENAME=${CHROME_URL_FILENAME##*/}
}

fp_should_check_update() {
    if [ ! -f ${WIDEVINE_VERSION_FILE} ] ; then
        CURRENT_VERSION="not installed"
    elif [ `find ${WIDEVINE_VERSION_FILE} -daystart -mtime +${DAYS_CHECK}` ] || \
        [ `find ${WIDEVINE_VERSION_FILE} -newermt "0 days"` ] ; then
        CURRENT_VERSION=$(cat ${WIDEVINE_VERSION_FILE})
    else
        fp_exit "No need to check yet"
    fi
}

fp_should_update() {
    if [ "${CURRENT_VERSION}" = "${CHROME_VERSION}" ] ; then
        # Touch the VERSION so it is not checked again until ${DAYS_CHECK} passed
        touch ${WIDEVINE_VERSION_FILE}
        fp_exit "Widevine plugin is up-to-date"
    fi
}

fp_download_chrome() {
    # Get Chrome
    echo "Downloading ${CHROME_FILENAME}"
    ${WGET_COMMAND} "${CHROME_URL_FILENAME}" -O "${TEMP_DIR}/${CHROME_FILENAME}" \
        || fp_exit_retry_with_error "Failed to download ${CHROME_FILENAME}"

    # Verify SHA1 checksum of debian file
    echo "Verifying ${TEMP_DIR}/${CHROME_FILENAME}"

    echo "${CHROME_SHA1SUM}  ${TEMP_DIR}/${CHROME_FILENAME}" | sha1sum -c > /dev/null 2>&1 \
	|| fp_exit_with_error "sha1sum mismatch ${TEMP_DIR}/${CHROME_FILENAME}"
}

fp_install_plugins() {
    local success=false

    echo "Installing ${TEMP_DIR}/${CHROME_FILENAME}"
    dpkg -x ${TEMP_DIR}/${CHROME_FILENAME} ${TEMP_DIR}/unpackedchrome || fp_exit_with_error "cannot unpack plugin"
    mkdir -p ${DEST_DIR}

    if [ -f ${TEMP_DIR}/unpackedchrome${WIDEVINE_SO_FILE} ]; then
        install -m 644 ${TEMP_DIR}/unpackedchrome${WIDEVINE_SO_FILE} ${DEST_DIR}
        echo "Widevine plugin installed"
        success=true
    fi

    if ${success}; then
        # Only update the version file if something got updated
        echo -n "${CHROME_VERSION}" > ${WIDEVINE_VERSION_FILE}
    else
        fp_exit_with_error "No plugins were installed"
    fi
}

fp_should_check_update
fp_find_latest_version
fp_should_update
fp_download_chrome
fp_install_plugins

fp_exit "Google Chrome plugins installed."

# vim: ts=2 sw=2
