#!/bin/bash -e
# Copyright (C) 2016 Endless Mobile, Inc.
# Licensed under the GPLv2

USERID=$(id -u)
if [ "$USERID" != "0" ]; then
    echo "Program requires superuser privileges"
    exit 1
fi

DEB_ARCH=`dpkg --print-architecture`
case ${DEB_ARCH} in
    amd64) ;; # Only 64-bit Intel architectures are supported
    *) echo "Unsupported architecture ${DEB_ARCH}"
       exit 1
       ;;
esac

TEMP_DIR=`mktemp -d`
DEST_DIR=/var/lib/chromium-plugins-extra/eos-chrome-plugin-updater
WGET_COMMAND="wget -c --tries=5"
DAYS_CHECK=7

# Data needed for the Widevine plugin, from Google Chrome
CHROME_URL=http://dl.google.com/linux/chrome/deb
CHROME_PACKAGES=${CHROME_URL}/dists/stable/main/binary-${DEB_ARCH}/Packages
CHROME_FLAVOUR_VERSION=google-chrome-stable
CHROME_VERSION=
CHROME_SHA1SUM=
CHROME_URL_FILENAME=
CHROME_FILENAME=

WIDEVINE_VERSION=
WIDEVINE_SO_FILE=/opt/google/chrome/libwidevinecdm.so
WIDEVINE_VERSION_FILE=${DEST_DIR}/Widevine_VERSION.txt

fp_init() {
    mkdir -p ${DEST_DIR}
}

fp_exit() {
   echo $1
   rm -fr ${TEMP_DIR}
   exit 0
}

fp_get_field() {
    grep-dctrl -n -s $1 ${CHROME_FLAVOUR_VERSION} ${TEMP_DIR}/Packages
}

fp_should_check_updates_widevine() {
    if [ ! -f ${WIDEVINE_VERSION_FILE} ] ; then
        WIDEVINE_VERSION="not installed"
    else
        WIDEVINE_VERSION=$(cat ${WIDEVINE_VERSION_FILE})
        if ! [ `find ${WIDEVINE_VERSION_FILE} -daystart -mtime +${DAYS_CHECK}` ] && \
           ! [ `find ${WIDEVINE_VERSION_FILE} -newermt "0 days"` ] ; then
            # Has been checked recently. No need to check
            echo "No need to check the Widevine plugin yet (version: ${WIDEVINE_VERSION})"
            return 1
        fi
    fi

    echo "Widevine plugin is not installed or might be too old. Checking for a new version"
    return 0
}

fp_fetch_widevine_metadata() {
    if ! ${WGET_COMMAND} "${CHROME_PACKAGES}" -O "${TEMP_DIR}/Packages"; then
        echo "Failed to download Packages from Google Chrome"
        return 1
    fi

    local package=$(fp_get_field "Package")
    if [ -z "${package}" ]; then
        echo "Packages does not contain ${CHROME_FLAVOUR_VERSION}"
        return 1
    fi

    CHROME_VERSION=$(fp_get_field "Version")
    CHROME_SHA1SUM=$(fp_get_field "SHA1")

    local filename=$(fp_get_field "Filename")
    CHROME_URL_FILENAME=${CHROME_URL}/${filename}
    CHROME_FILENAME=${CHROME_URL_FILENAME##*/}
}

fp_should_update_widevine() {
    if fp_fetch_widevine_metadata; then
       if [ "${WIDEVINE_VERSION}" = "${CHROME_VERSION}" ] ; then
           # Touch the VERSION so it is not checked again until ${DAYS_CHECK} passed
           echo "Widevine plugin is up-to-date"
           touch ${WIDEVINE_VERSION_FILE}
           return 1
       else
           echo "A new version of the widevine plugin is available: ${CHROME_VERSION}"
           return 0
       fi
    else
        echo "An error happened fetching metadata for the Widevine plugin"
        return 1
    fi
}

fp_download_google_chrome() {
    # Get Chrome
    echo "Downloading ${CHROME_FILENAME}"
    if ! ${WGET_COMMAND} "${CHROME_URL_FILENAME}" -O "${TEMP_DIR}/${CHROME_FILENAME}"; then
        echo "Failed to download ${CHROME_FILENAME}"
        return 1
    fi

    # Verify SHA1 checksum of debian file
    echo "Verifying ${TEMP_DIR}/${CHROME_FILENAME}"
    echo "${CHROME_SHA1SUM} ${TEMP_DIR}/${CHROME_FILENAME}" | sha1sum -c > /dev/null 2>&1 || \
    {
        echo "sha1sum mismatch ${TEMP_DIR}/${CHROME_FILENAME}"
        return 1
    }
}

fp_install_widevine_plugin() {
    echo "Installing ${TEMP_DIR}/${CHROME_FILENAME}"
    if ! dpkg -x ${TEMP_DIR}/${CHROME_FILENAME} ${TEMP_DIR}/unpackedchrome ; then
        echo "Cannot unpack package file ${CHROME_FILENAME}"
        return
    fi

    if [ -f ${TEMP_DIR}/unpackedchrome${WIDEVINE_SO_FILE} ]; then
        install -m 644 ${TEMP_DIR}/unpackedchrome${WIDEVINE_SO_FILE} ${DEST_DIR}
        echo "Widevine plugin installed"
        echo -n "${CHROME_VERSION}" > ${WIDEVINE_VERSION_FILE}
    else
        echo "The Widevine plugin was NOT installed"
    fi
}

fp_init

# Widevine plugin
if fp_should_check_updates_widevine ; then
    if fp_should_update_widevine && fp_download_google_chrome; then
        fp_install_widevine_plugin
    else
        echo "The Widevine plugin was NOT updated"
    fi
fi

fp_exit "All done"

# vim: ts=2 sw=2
